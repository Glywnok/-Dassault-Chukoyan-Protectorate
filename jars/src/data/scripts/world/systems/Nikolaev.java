package data.scripts.world.systems;

import com.fs.starfarer.api.Global;
import com.fs.starfarer.api.campaign.JumpPointAPI;
import com.fs.starfarer.api.campaign.LocationAPI;
import com.fs.starfarer.api.campaign.OrbitAPI;
import com.fs.starfarer.api.campaign.PlanetAPI;
import com.fs.starfarer.api.campaign.SectorAPI;
import com.fs.starfarer.api.campaign.SectorEntityToken;
import com.fs.starfarer.api.campaign.StarSystemAPI;
import com.fs.starfarer.api.campaign.econ.MarketAPI;
import com.fs.starfarer.api.impl.campaign.DerelictShipEntityPlugin.DerelictShipData;
import com.fs.starfarer.api.impl.campaign.DerelictShipEntityPlugin.DerelictType;
import com.fs.starfarer.api.impl.campaign.procgen.DefenderDataOverride;
import com.fs.starfarer.api.impl.campaign.procgen.NebulaEditor;
import com.fs.starfarer.api.impl.campaign.procgen.StarAge;
import com.fs.starfarer.api.impl.campaign.procgen.StarSystemGenerator;
import com.fs.starfarer.api.impl.campaign.procgen.themes.BaseThemeGenerator;
import com.fs.starfarer.api.impl.campaign.procgen.themes.DerelictThemeGenerator;
import com.fs.starfarer.api.impl.campaign.procgen.themes.SalvageSpecialAssigner.ShipRecoverySpecialCreator;
import com.fs.starfarer.api.impl.campaign.procgen.themes.SalvageSpecialAssigner.SpecialCreationContext;
import com.fs.starfarer.api.impl.campaign.rulecmd.salvage.special.ShipRecoverySpecial.PerShipData;
import com.fs.starfarer.api.impl.campaign.rulecmd.salvage.special.ShipRecoverySpecial.ShipCondition;
import com.fs.starfarer.api.impl.campaign.terrain.HyperspaceTerrainPlugin;
import com.fs.starfarer.api.impl.campaign.terrain.AsteroidFieldTerrainPlugin.AsteroidFieldParams;
import com.fs.starfarer.api.impl.campaign.terrain.DebrisFieldTerrainPlugin.DebrisFieldParams;
import com.fs.starfarer.api.impl.campaign.terrain.DebrisFieldTerrainPlugin.DebrisFieldSource;
import com.fs.starfarer.api.impl.campaign.terrain.MagneticFieldTerrainPlugin.MagneticFieldParams;
import com.fs.starfarer.api.util.Misc;
import com.fs.starfarer.api.util.WeightedRandomPicker;
import data.scripts.world.AddMarketplace;
import java.awt.Color;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Random;

public class Nikolaev {
   public void generate(SectorAPI sector) {
      StarSystemAPI system = sector.createStarSystem("Nikolaev");
      LocationAPI hyper = Global.getSector().getHyperspace();
      system.setBackgroundTextureFilename("graphics/backgrounds/background2.jpg");
      PlanetAPI star = system.initStar("nikolaev", "star_yellow", 600.0F, 800.0F, 4.0F, 0.3F, 1.6F);
      system.setLightColor(new Color(235, 235, 225));
      system.addTag("theme_core");
      system.addTag("theme_core_populated");
      system.addTag("theme_dassault_system");
      system.addTag("theme_dassault_major");
      system.addTag("theme_dassault_capital");
      SectorEntityToken nikolaev_field1 = system.addTerrain("magnetic_field", new MagneticFieldParams(400.0F, 1050.0F, star, 850.0F, 1250.0F, new Color(50, 30, 100, 30), 0.3F, new Color[]{new Color(50, 20, 110, 130), new Color(150, 30, 120, 150), new Color(200, 50, 130, 190), new Color(250, 70, 150, 240), new Color(200, 80, 130, 255), new Color(75, 0, 160), new Color(127, 0, 255)}));
      nikolaev_field1.setCircularOrbit(star, 0.0F, 0.0F, 120.0F);
      PlanetAPI etincelle = system.addPlanet("dcp_DME_planet_etincelle", star, "Ã‰tincelle", "lava", 150.0F, 60.0F, 1400.0F, 45.0F);
      etincelle.setCustomDescriptionId("planet_etincelle");
      Misc.initConditionMarket(etincelle);
      etincelle.getMarket().addCondition("extreme_tectonic_activity");
      etincelle.getMarket().addCondition("very_hot");
      etincelle.getMarket().addCondition("ruins_scattered");
      etincelle.getMarket().addCondition("ore_ultrarich");
      etincelle.getMarket().addCondition("rare_ore_rich");
      SectorEntityToken etincelle_field = system.addTerrain("magnetic_field", new MagneticFieldParams(60.0F, 110.0F, etincelle, 80.0F, 140.0F, new Color(50, 30, 100, 30), 0.6F, new Color[]{new Color(50, 20, 110, 130), new Color(200, 50, 130, 190), new Color(250, 70, 150, 240), new Color(200, 80, 130, 255), new Color(75, 0, 160), new Color(127, 0, 255)}));
      etincelle_field.setCircularOrbit(etincelle, 0.0F, 0.0F, 100.0F);
      system.addRingBand(star, "misc", "rings_dust0", 256.0F, 3, Color.white, 256.0F, 1900.0F, 90.0F, "ring", "Nikolaev Dustband");
      PlanetAPI odessa = system.addPlanet("dcp_DME_planet_odessa", star, "Odessa", "water", 270.0F, 90.0F, 2700.0F, 60.0F);
      odessa.setCustomDescriptionId("planet_odessa");
      Misc.initConditionMarket(odessa);
      odessa.getMarket().addCondition("habitable");
      odessa.getMarket().addCondition("water_surface");
      odessa.getMarket().addCondition("mild_climate");
      odessa.getMarket().addCondition("organics_common");
      odessa.getMarket().addCondition("closed_immigration");
      odessa.getMarket().getFirstCondition("organics_common").setSurveyed(false);
      SectorEntityToken odessaBase = system.addCustomEntity("dcp_DME_odessabase", "Cousteau Base", "station_dme_small", "dassault_mikoyan");
      odessaBase.setCircularOrbitPointingDown(system.getEntityById("dcp_DME_planet_odessa"), 75.0F, 180.0F, 36.0F);
      odessaBase.setCustomDescriptionId("station_cousteaubase");
      odessaBase.setInteractionImage("illustrations", "cargo_loading");
      odessaBase.addTag("dcp_DME_researchBase");
      SectorEntityToken nikolaev_inner_buoy = system.addCustomEntity((String)null, "Nikolaev Nav Buoy", "nav_buoy", "dassault_mikoyan");
      nikolaev_inner_buoy.setCircularOrbitPointingDown(star, 90.0F, 2700.0F, 60.0F);
      PlanetAPI peremohy = system.addPlanet("dcp_DME_planet_peremohy", star, "Peremohy", "terran-eccentric", 0.0F, 200.0F, 5200.0F, 100.0F);
      peremohy.getSpec().setGlowTexture(Global.getSettings().getSpriteName("hab_glows", "sindria"));
      peremohy.getSpec().setGlowColor(new Color(255, 255, 255, 255));
      peremohy.getSpec().setUseReverseLightForGlow(true);
      peremohy.applySpecChanges();
      peremohy.setInteractionImage("illustrations", "urban00");
      SectorEntityToken station = system.addCustomEntity("nikolaev_port", "Peremohy Highport", "station_nikolaev_highport", "dassault_mikoyan");
      station.setCircularOrbitPointingDown(system.getEntityById("dcp_DME_planet_peremohy"), 45.0F, 420.0F, 45.0F);
      station.setInteractionImage("illustrations", "orbital");
      MarketAPI peremohyMarket = AddMarketplace.addMarketplace("dassault_mikoyan", peremohy, new ArrayList(Arrays.asList(station)), "Peremohy", 7, new ArrayList(Arrays.asList("habitable", "farmland_adequate", "ore_moderate", "rare_ore_sparse", "urbanized_polity", "regional_capital", "terran", "population_7")), new ArrayList(Arrays.asList("starfortress_mid", "militarybase", "refining", "megaport", "heavybatteries", "dcp_DME_6emebureau", "population")), new ArrayList(Arrays.asList("generic_military", "black_market", "open_market", "storage")), 0.2F);
      peremohyMarket.addIndustry("orbitalworks", new ArrayList(Arrays.asList("pristine_nanoforge")));
      peremohy.setCustomDescriptionId("planet_peremohy");
      station.setCustomDescriptionId("nikolaev_highport");
      JumpPointAPI jumpPoint1 = Global.getFactory().createJumpPoint("nikolaev_jump_point_alpha", "Nikolaev Passage");
      OrbitAPI orbit = Global.getFactory().createCircularOrbit(peremohy, 0.0F, 500.0F, 30.0F);
      jumpPoint1.setOrbit(orbit);
      jumpPoint1.setRelatedPlanet(peremohy);
      jumpPoint1.setStandardWormholeToHyperspaceVisual();
      jumpPoint1.setCircularOrbit(system.getEntityById("nikolaev"), 60.0F, 5200.0F, 100.0F);
      system.addEntity(jumpPoint1);
      SectorEntityToken nikolaev_relay = system.addCustomEntity("nikolaev_relay", "Nikolaev Relay", "comm_relay", "dassault_mikoyan");
      nikolaev_relay.setCircularOrbitPointingDown(system.getEntityById("nikolaev"), -60.0F, 5200.0F, 100.0F);
      system.addRingBand(star, "misc", "rings_dust0", 256.0F, 2, Color.gray, 256.0F, 6280.0F, 203.0F, (String)null, (String)null);
      system.addRingBand(star, "misc", "rings_ice0", 256.0F, 2, Color.white, 256.0F, 6320.0F, 211.0F, (String)null, (String)null);
      system.addAsteroidBelt(star, 150, 6300.0F, 170.0F, 200.0F, 250.0F, "asteroid_belt", "Nikolaev Belt");
      system.addRingBand(star, "misc", "rings_ice0", 256.0F, 3, Color.white, 256.0F, 6670.0F, 220.0F, (String)null, (String)null);
      system.addRingBand(star, "misc", "rings_asteroids0", 256.0F, 2, Color.white, 256.0F, 6715.0F, 223.0F, (String)null, (String)null);
      system.addRingBand(star, "misc", "rings_dust0", 256.0F, 2, Color.white, 256.0F, 6760.0F, 226.0F, (String)null, (String)null);
      system.addAsteroidBelt(star, 150, 6600.0F, 170.0F, 200.0F, 250.0F, "asteroid_belt", "Nikolaev Belt");
      system.addAsteroidBelt(star, 100, 6750.0F, 128.0F, 200.0F, 300.0F, "asteroid_belt", "Nikolaev Belt");
      DebrisFieldParams params1 = new DebrisFieldParams(450.0F, 1.2F, 1.0E7F, 0.0F);
      params1.source = DebrisFieldSource.MIXED;
      params1.baseSalvageXP = 500L;
      SectorEntityToken debrisBelt1 = Misc.addDebrisField(system, params1, StarSystemGenerator.random);
      debrisBelt1.setSensorProfile(1000.0F);
      debrisBelt1.setDiscoverable(true);
      debrisBelt1.setCircularOrbit(star, 120.0F, 6480.0F, 240.0F);
      debrisBelt1.setId("nikolaev_debrisBelt1");
      DebrisFieldParams params2 = new DebrisFieldParams(300.0F, 1.2F, 1.0E7F, 0.0F);
      params2.source = DebrisFieldSource.MIXED;
      params2.baseSalvageXP = 500L;
      SectorEntityToken debrisBelt2 = Misc.addDebrisField(system, params2, StarSystemGenerator.random);
      debrisBelt2.setSensorProfile(1000.0F);
      debrisBelt2.setDiscoverable(true);
      debrisBelt2.setCircularOrbit(star, 360.0F, 6480.0F, 240.0F);
      debrisBelt2.setId("nikolaev_debrisBelt2");
      SectorEntityToken neutralStation = system.addCustomEntity("nikolaev_abandoned_station", "Abandoned Belt Station", "station_dme_belt", "neutral");
      neutralStation.setCircularOrbitWithSpin(system.getEntityById("nikolaev"), 240.0F, 6480.0F, 240.0F, 5.0F, 15.0F);
      neutralStation.setDiscoverable(true);
      neutralStation.setDiscoveryXP(1500.0F);
      neutralStation.setSensorProfile(0.25F);
      neutralStation.setCustomDescriptionId("nikolaev_beltstation");
      neutralStation.setInteractionImage("illustrations", "abandoned_station2");
      neutralStation.getMemoryWithoutUpdate().set("$abandonedStation", true);
      Misc.setAbandonedStationMarket("nikolaev_abandoned_station_market", neutralStation);
      neutralStation.getMarket().getSubmarket("storage").getCargo().addCommodity("metals", 500.0F);
      neutralStation.getMarket().getSubmarket("storage").getCargo().addCommodity("rare_metals", 150.0F);
      neutralStation.getMarket().getSubmarket("storage").getCargo().addCommodity("food", 100.0F);
      neutralStation.getMarket().getSubmarket("storage").getCargo().addCommodity("heavy_machinery", 50.0F);
      SectorEntityToken scrap1 = DerelictThemeGenerator.addSalvageEntity(system, "equipment_cache_small", "derelict");
      scrap1.setId("nikolaev_scrap1");
      scrap1.setCircularOrbit(star, 165.0F, 6420.0F, 223.0F);
      Misc.setDefenderOverride(scrap1, new DefenderDataOverride("derelict", 0.0F, 0.0F, 0.0F));
      scrap1.setDiscoverable(Boolean.TRUE);
      SectorEntityToken scrap2 = DerelictThemeGenerator.addSalvageEntity(system, "weapons_cache_small_remnant", "derelict");
      scrap2.setId("nikolaev_scrap2");
      scrap2.setCircularOrbit(star, 285.0F, 6420.0F, 223.0F);
      Misc.setDefenderOverride(scrap2, new DefenderDataOverride("derelict", 0.0F, 0.0F, 0.0F));
      scrap2.setDiscoverable(Boolean.TRUE);
      SectorEntityToken scrap3 = DerelictThemeGenerator.addSalvageEntity(system, "weapons_cache_remnant", "derelict");
      scrap3.setId("nikolaev_scrap3");
      scrap3.setCircularOrbit(star, 45.0F, 6480.0F, 223.0F);
      Misc.setDefenderOverride(scrap3, new DefenderDataOverride("derelict", 0.0F, 0.0F, 0.0F));
      scrap3.setDiscoverable(Boolean.TRUE);
      SectorEntityToken gate = system.addCustomEntity("nikolaev_gate", "Nikolaev Gate", "inactive_gate", (String)null);
      gate.setCircularOrbit(system.getEntityById("nikolaev"), 240.0F, 8000.0F, 400.0F);
      PlanetAPI stendhal = system.addPlanet("dcp_DME_planet_stendhal", star, "Stendhal", "gas_giant", 150.0F, 500.0F, 10800.0F, 300.0F);
      stendhal.getSpec().setPlanetColor(new Color(255, 210, 180, 255));
      stendhal.getSpec().setAtmosphereColor(new Color(135, 45, 15, 135));
      stendhal.getSpec().setCloudColor(new Color(215, 215, 200, 200));
      stendhal.getSpec().setIconColor(new Color(155, 125, 75, 255));
      stendhal.getSpec().setGlowTexture(Global.getSettings().getSpriteName("hab_glows", "aurorae"));
      stendhal.getSpec().setGlowColor(new Color(135, 45, 15, 135));
      stendhal.getSpec().setUseReverseLightForGlow(true);
      stendhal.getSpec().setAtmosphereThickness(0.6F);
      stendhal.applySpecChanges();
      stendhal.setCustomDescriptionId("planet_stendhal");
      SectorEntityToken stendhal_field1 = system.addTerrain("magnetic_field", new MagneticFieldParams(200.0F, 625.0F, stendhal, 525.0F, 725.0F, new Color(50, 30, 100, 60), 1.0F, new Color[]{new Color(50, 20, 110, 135), new Color(150, 30, 120, 150), new Color(200, 50, 130, 190), new Color(250, 70, 150, 240), new Color(200, 80, 130, 255), new Color(75, 0, 160), new Color(127, 0, 255)}));
      stendhal_field1.setCircularOrbit(stendhal, 0.0F, 0.0F, 100.0F);
      SectorEntityToken stendhal_field2 = system.addTerrain("magnetic_field", new MagneticFieldParams(400.0F, 900.0F, stendhal, 700.0F, 1100.0F, new Color(50, 30, 100, 30), 0.3F, new Color[]{new Color(50, 20, 110, 135), new Color(150, 30, 120, 150), new Color(200, 50, 130, 190), new Color(250, 70, 150, 240), new Color(200, 80, 130, 255), new Color(75, 0, 160), new Color(127, 0, 255)}));
      stendhal_field2.setCircularOrbit(stendhal, 0.0F, 0.0F, 100.0F);
      system.addRingBand(stendhal, "misc", "rings_ice0", 256.0F, 2, Color.white, 256.0F, 1520.0F, 70.0F);
      system.addRingBand(stendhal, "misc", "rings_dust0", 256.0F, 2, Color.white, 256.0F, 1500.0F, 80.0F);
      system.addRingBand(stendhal, "misc", "rings_ice0", 256.0F, 1, Color.white, 256.0F, 1445.0F, 90.0F, "ring", "Stendhal Ring");
      PlanetAPI stendhal1 = system.addPlanet("dcp_DME_planet_rouge", stendhal, "Rouge", "lava_minor", 36.0F, 90.0F, 960.0F, 45.0F);
      stendhal1.setCustomDescriptionId("planet_rouge");
      Misc.initConditionMarket(stendhal1);
      stendhal1.getMarket().addCondition("hot");
      stendhal1.getMarket().addCondition("extreme_tectonic_activity");
      stendhal1.getMarket().addCondition("ore_abundant");
      stendhal1.getMarket().getFirstCondition("ore_abundant").setSurveyed(true);
      stendhal1.getMarket().addCondition("rare_ore_sparse");
      stendhal1.getMarket().getFirstCondition("rare_ore_sparse").setSurveyed(true);
      SectorEntityToken rouge_field = system.addTerrain("magnetic_field", new MagneticFieldParams(90.0F, 160.0F, stendhal1, 120.0F, 210.0F, new Color(50, 30, 100, 60), 0.6F, new Color[]{new Color(50, 20, 110, 130), new Color(200, 50, 130, 190), new Color(250, 70, 150, 240), new Color(200, 80, 130, 255), new Color(75, 0, 160), new Color(127, 0, 255)}));
      rouge_field.setCircularOrbit(stendhal1, 0.0F, 0.0F, 100.0F);
      PlanetAPI stendhal2 = system.addPlanet("dcp_DME_planet_noir", stendhal, "Noir", "barren_castiron", 180.0F, 120.0F, 2100.0F, 80.0F);
      stendhal2.getSpec().setPlanetColor(new Color(220, 245, 255, 255));
      stendhal2.getSpec().setAtmosphereColor(new Color(150, 120, 100, 250));
      stendhal2.getSpec().setCloudColor(new Color(150, 120, 120, 150));
      stendhal2.setCustomDescriptionId("planet_noir");
      Misc.initConditionMarket(stendhal2);
      stendhal2.getMarket().addCondition("no_atmosphere");
      stendhal2.getMarket().addCondition("low_gravity");
      stendhal2.getMarket().addCondition("volatiles_diffuse");
      stendhal2.getMarket().getFirstCondition("volatiles_diffuse").setSurveyed(true);
      SectorEntityToken stendhal_tether1 = system.addCustomEntity("stendhal_tether1", "Power Tether", "station_dme_tether", "dassault_mikoyan");
      stendhal_tether1.setCircularOrbitPointingDown(stendhal, 0.0F, 720.0F, 30.0F);
      stendhal_tether1.setCustomDescriptionId("dcp_DME_powertether");
      SectorEntityToken stendhal_tether2 = system.addCustomEntity("stendhal_tether2", "Power Tether", "station_dme_tether", "dassault_mikoyan");
      stendhal_tether2.setCircularOrbitPointingDown(stendhal, 72.0F, 720.0F, 30.0F);
      stendhal_tether2.setCustomDescriptionId("dcp_DME_powertether");
      SectorEntityToken stendhal_tether3 = system.addCustomEntity("stendhal_tether3", "Power Tether", "station_dme_tether", "dassault_mikoyan");
      stendhal_tether3.setCircularOrbitPointingDown(stendhal, 144.0F, 720.0F, 30.0F);
      stendhal_tether3.setCustomDescriptionId("dcp_DME_powertether");
      SectorEntityToken stendhal_tether4 = system.addCustomEntity("stendhal_tether4", "Power Tether", "station_dme_tether", "dassault_mikoyan");
      stendhal_tether4.setCircularOrbitPointingDown(stendhal, 216.0F, 720.0F, 30.0F);
      stendhal_tether4.setCustomDescriptionId("dcp_DME_powertether");
      SectorEntityToken stendhal_tether5 = system.addCustomEntity("stendhal_tether5", "Power Tether", "station_dme_tether", "dassault_mikoyan");
      stendhal_tether5.setCircularOrbitPointingDown(stendhal, 288.0F, 720.0F, 30.0F);
      stendhal_tether5.setCustomDescriptionId("dcp_DME_powertether");
      SectorEntityToken labStation = system.addCustomEntity("nikolaev_lab", "Lavoisier Base", "station_dme_lab", "dassault_mikoyan");
      labStation.setCircularOrbitPointingDown(system.getEntityById("dcp_DME_planet_noir"), 30.0F, 300.0F, 30.0F);
      AddMarketplace.addMarketplace("dassault_mikoyan", labStation, (ArrayList)null, "Lavoisier Base", 4, new ArrayList(Arrays.asList("free_market", "outpost", "population_4")), new ArrayList(Arrays.asList("battlestation_high", "patrolhq", "waystation", "spaceport", "heavybatteries", "lightindustry", "population")), new ArrayList(Arrays.asList("black_market", "open_market", "storage")), 0.2F);
      labStation.setCustomDescriptionId("lavoisier_base");
      SectorEntityToken stendhalL4 = system.addTerrain("asteroid_field", new AsteroidFieldParams(840.0F, 1080.0F, 35, 64, 7.0F, 21.0F, "Stendhal L4 Shoal Zone"));
      PlanetAPI juliette = system.addPlanet("dcp_DME_planet_juliette", star, "Juliette", "barren-bombarded", 210.0F, 40.0F, 10850.0F, 300.0F);
      juliette.setCustomDescriptionId("planet_juliette");
      Misc.initConditionMarket(juliette);
      juliette.getMarket().addCondition("no_atmosphere");
      juliette.getMarket().addCondition("low_gravity");
      juliette.getMarket().addCondition("meteor_impacts");
      juliette.getMarket().addCondition("volatiles_trace");
      SectorEntityToken scrap4 = DerelictThemeGenerator.addSalvageEntity(system, "supply_cache", "derelict");
      scrap4.setId("nikolaev_scrap4");
      scrap4.setCircularOrbit(juliette, 105.0F, 240.0F, 135.0F);
      Misc.setDefenderOverride(scrap4, new DefenderDataOverride("derelict", 0.0F, 0.0F, 0.0F));
      scrap4.setDiscoverable(Boolean.TRUE);
      DebrisFieldParams params3 = new DebrisFieldParams(700.0F, 1.0F, 1.0E7F, 0.0F);
      params3.source = DebrisFieldSource.SALVAGE;
      params3.baseSalvageXP = 500L;
      SectorEntityToken debrisL4 = Misc.addDebrisField(system, params3, StarSystemGenerator.random);
      debrisL4.setSensorProfile(600.0F);
      debrisL4.setDiscoverable(true);
      debrisL4.setCircularOrbit(star, 210.0F, 10800.0F, 300.0F);
      debrisL4.setId("nikolaev_debrisL4");
      this.addDerelict(system, juliette, "dcp_DME_puddlejumper_mk1_std", ShipCondition.GOOD, 120.0F, Math.random() < 0.5D, "independent");
      this.addDerelict(system, juliette, "dcp_DME_sevastopol_mk1_std", ShipCondition.PRISTINE, 150.0F, true, "independent");
      this.addDerelict(system, juliette, "dcp_DME_centaur_export", ShipCondition.AVERAGE, 210.0F, Math.random() < 0.5D, "dassault_mikoyan");
      this.addDerelict(system, juliette, "dcp_DME_naja_mk1_std", ShipCondition.AVERAGE, 240.0F, Math.random() < 0.5D, "independent");
      this.addDerelict(system, juliette, "dcp_DME_tereshkova_export", ShipCondition.BATTERED, 300.0F, Math.random() < 0.5D, "dassault_mikoyan");
      this.addDerelict(system, juliette, "dcp_DME_tunguska_6e_elite", ShipCondition.BATTERED, 360.0F, Math.random() < 0.5D, "6eme_bureau");
      this.addDerelict(system, juliette, "dcp_DME_samoyed_export", ShipCondition.BATTERED, 440.0F, true, "dassault_mikoyan");
      this.addDerelict(system, juliette, "dcp_DME_zelenograd_explore", ShipCondition.WRECKED, 520.0F, false, "dassault_mikoyan");
      SectorEntityToken stendhalL5 = system.addTerrain("asteroid_field", new AsteroidFieldParams(840.0F, 1080.0F, 35, 64, 7.0F, 21.0F, "Stendhal L5 Shoal Zone"));
      stendhalL4.setCircularOrbit(star, 210.0F, 10800.0F, 300.0F);
      stendhalL5.setCircularOrbit(star, 90.0F, 10800.0F, 300.0F);
      SectorEntityToken stendhalL3_array = system.addCustomEntity((String)null, "Nikolaev Detector Array", "sensor_array", "dassault_mikoyan");
      stendhalL3_array.setCircularOrbitPointingDown(star, 330.0F, 10800.0F, 300.0F);
      SectorEntityToken pirStation = system.addCustomEntity("brightheaven", "Brightheaven", "station_sporeship_derelict", "pirates");
      pirStation.setCircularOrbitWithSpin(system.getEntityById("nikolaev"), 90.0F, 10850.0F, 300.0F, 7.0F, 21.0F);
      AddMarketplace.addMarketplace("pirates", pirStation, (ArrayList)null, "Brightheaven", 4, new ArrayList(Arrays.asList("free_market", "stealth_minefields", "organized_crime", "population_4")), new ArrayList(Arrays.asList("battlestation", "waystation", "spaceport", "population")), new ArrayList(Arrays.asList("black_market", "open_market", "storage")), 0.3F);
      pirStation.setCustomDescriptionId("station_brightheaven");
      this.addDerelict(system, pirStation, "dcp_DME_sevastopol_mk1_std", ShipCondition.GOOD, 200.0F, Math.random() < 0.5D, "independent");
      this.addDerelict(system, pirStation, "dcp_DME_naja_mk1_std", ShipCondition.BATTERED, 320.0F, true, "independent");
      system.addRingBand(star, "misc", "rings_dust0", 256.0F, 3, Color.white, 256.0F, 15200.0F, 450.0F, "ring", "Nikolaev Outer Band");
      system.addRingBand(star, "misc", "rings_dust0", 256.0F, 2, Color.gray, 256.0F, 15580.0F, 453.0F, (String)null, (String)null);
      system.addRingBand(star, "misc", "rings_ice0", 256.0F, 2, Color.white, 256.0F, 15620.0F, 461.0F, (String)null, (String)null);
      system.addAsteroidBelt(star, 150, 15600.0F, 170.0F, 200.0F, 520.0F, "asteroid_belt", "Nikolaev Outer Belt");
      StarSystemGenerator.addOrbitingEntities(system, star, StarAge.AVERAGE, 1, 3, 16800.0F, 5, true);
      system.autogenerateHyperspaceJumpPoints(true, true);
      HyperspaceTerrainPlugin plugin = (HyperspaceTerrainPlugin)Misc.getHyperspaceTerrain().getPlugin();
      NebulaEditor editor = new NebulaEditor(plugin);
      float minRadius = plugin.getTileSize() * 2.0F;
      float radius = system.getMaxRadiusInHyperspace();
      editor.clearArc(system.getLocation().x, system.getLocation().y, 0.0F, radius + minRadius, 0.0F, 360.0F);
      editor.clearArc(system.getLocation().x, system.getLocation().y, 0.0F, radius + minRadius, 0.0F, 360.0F, 0.25F);
   }

   private void addDerelict(StarSystemAPI system, SectorEntityToken focus, String variantId, ShipCondition condition, float orbitRadius, boolean recoverable, String factionIdForShipName) {
      DerelictShipData params = new DerelictShipData(new PerShipData(variantId, condition), false);
      SectorEntityToken ship = BaseThemeGenerator.addSalvageEntity(system, "wreck", "neutral", params);
      ship.setDiscoverable(true);
      float orbitDays = orbitRadius / (10.0F + (float)Math.random() * 5.0F);
      ship.setCircularOrbit(focus, (float)Math.random() * 360.0F, orbitRadius, orbitDays);
      if (recoverable) {
         ShipRecoverySpecialCreator creator = new ShipRecoverySpecialCreator((Random)null, 0, 0, false, (DerelictType)null, (WeightedRandomPicker)null);
         Misc.setSalvageSpecial(ship, creator.createSpecial(ship, (SpecialCreationContext)null));
      }

   }
}
