package data.scripts.world.systems;

import com.fs.starfarer.api.Global;
import com.fs.starfarer.api.campaign.CampaignFleetAPI;
import com.fs.starfarer.api.campaign.CargoAPI;
import com.fs.starfarer.api.campaign.CustomCampaignEntityAPI;
import com.fs.starfarer.api.campaign.JumpPointAPI;
import com.fs.starfarer.api.campaign.LocationAPI;
import com.fs.starfarer.api.campaign.PlanetAPI;
import com.fs.starfarer.api.campaign.RingBandAPI;
import com.fs.starfarer.api.campaign.SectorAPI;
import com.fs.starfarer.api.campaign.SectorEntityToken;
import com.fs.starfarer.api.campaign.SpecialItemData;
import com.fs.starfarer.api.campaign.StarSystemAPI;
import com.fs.starfarer.api.campaign.ai.CampaignFleetAIAPI;
import com.fs.starfarer.api.campaign.econ.MarketAPI;
import com.fs.starfarer.api.characters.PersonAPI;
import com.fs.starfarer.api.fleet.FleetMemberAPI;
import com.fs.starfarer.api.fleet.FleetMemberType;
import com.fs.starfarer.api.impl.campaign.DerelictShipEntityPlugin.DerelictShipData;
import com.fs.starfarer.api.impl.campaign.DerelictShipEntityPlugin.DerelictType;
import com.fs.starfarer.api.impl.campaign.events.OfficerManagerEvent;
import com.fs.starfarer.api.impl.campaign.fleets.FleetFactoryV3;
import com.fs.starfarer.api.impl.campaign.procgen.Constellation;
import com.fs.starfarer.api.impl.campaign.procgen.DefenderDataOverride;
import com.fs.starfarer.api.impl.campaign.procgen.NameGenData;
import com.fs.starfarer.api.impl.campaign.procgen.NebulaEditor;
import com.fs.starfarer.api.impl.campaign.procgen.StarAge;
import com.fs.starfarer.api.impl.campaign.procgen.StarSystemGenerator;
import com.fs.starfarer.api.impl.campaign.procgen.Constellation.ConstellationType;
import com.fs.starfarer.api.impl.campaign.procgen.ProcgenUsedNames.NamePick;
import com.fs.starfarer.api.impl.campaign.procgen.themes.BaseThemeGenerator;
import com.fs.starfarer.api.impl.campaign.procgen.themes.DerelictThemeGenerator;
import com.fs.starfarer.api.impl.campaign.procgen.themes.SalvageSpecialAssigner.ShipRecoverySpecialCreator;
import com.fs.starfarer.api.impl.campaign.procgen.themes.SalvageSpecialAssigner.SpecialCreationContext;
import com.fs.starfarer.api.impl.campaign.rulecmd.salvage.special.BaseSalvageSpecial;
import com.fs.starfarer.api.impl.campaign.rulecmd.salvage.special.ShipRecoverySpecial.PerShipData;
import com.fs.starfarer.api.impl.campaign.rulecmd.salvage.special.ShipRecoverySpecial.ShipCondition;
import com.fs.starfarer.api.impl.campaign.terrain.HyperspaceTerrainPlugin;
import com.fs.starfarer.api.impl.campaign.terrain.AsteroidFieldTerrainPlugin.AsteroidFieldParams;
import com.fs.starfarer.api.impl.campaign.terrain.DebrisFieldTerrainPlugin.DebrisFieldParams;
import com.fs.starfarer.api.impl.campaign.terrain.DebrisFieldTerrainPlugin.DebrisFieldSource;
import com.fs.starfarer.api.impl.campaign.terrain.MagneticFieldTerrainPlugin.MagneticFieldParams;
import com.fs.starfarer.api.util.Misc;
import com.fs.starfarer.api.util.WeightedRandomPicker;
import data.campaign.procgen.themes.BladeBreakerStationFleetManager;
import data.campaign.procgen.themes.BladeBreakerThemeGenerator;
import data.scripts.world.SigmaUtils;
import java.awt.Color;
import java.util.Random;

public class BessonConstellation {
   Random characterSaveSeed;
   Random random;
   float selector;
   float spawnXradius;
   float spawnYradius;
   float spawnXoffset;
   float spawnYoffset;
   float selectionXradiusSq;
   float selectionYradiusSq;
   float selectionAngle;
   public float hsLocationX;
   public float hsLocationY;
   float A1Xoffset;
   float A1Yoffset;
   float A2Xoffset;
   float A2Yoffset;
   float A3Xoffset;
   float A3Yoffset;
   float A4Xoffset;
   float A4Yoffset;
   float A5Xoffset;
   float A5Yoffset;
   String[] strings;
   int nameSelector;
   public String StarName;
   public static float radius_star = 350.0F;
   public static float radius_station = 2600.0F;
   public static float radius_acolyte = 1450.0F;
   public static float radius_variation = 400.0F;
   public static float radius_derelictvar = 700.0F;

   public BessonConstellation() {
      this.characterSaveSeed = StarSystemGenerator.random;
      this.random = new Random(this.characterSaveSeed.nextLong());
      this.selector = this.random.nextFloat();
      this.spawnXradius = 3200.0F;
      this.spawnYradius = 1800.0F;
      this.spawnXoffset = 6000.0F;
      this.spawnYoffset = -38400.0F;
      this.selectionXradiusSq = this.selector * this.spawnXradius * this.spawnXradius;
      this.selectionYradiusSq = this.selector * this.spawnYradius * this.spawnYradius;
      this.selectionAngle = this.selector * 360.0F;
      this.hsLocationX = (float)(Math.sqrt((double)this.selectionXradiusSq) * Math.cos((double)this.selectionAngle));
      this.hsLocationY = (float)(Math.sqrt((double)this.selectionYradiusSq) * Math.sin((double)this.selectionAngle));
      this.A1Xoffset = (float)(-500.0D + Math.random() * 500.0D);
      this.A1Yoffset = (float)(1000.0D + Math.random() * -500.0D);
      this.A2Xoffset = (float)(-3000.0D + Math.random() * -1000.0D);
      this.A2Yoffset = (float)(1500.0D + Math.random() * 1500.0D);
      this.A3Xoffset = (float)(1500.0D + Math.random() * 1500.0D);
      this.A3Yoffset = (float)(1250.0D + Math.random() * 1250.0D);
      this.A4Xoffset = (float)(3000.0D + Math.random() * 1000.0D);
      this.A4Yoffset = (float)(-2000.0D + Math.random() * -1500.0D);
      this.A5Xoffset = (float)((double)(this.A3Xoffset + 1250.0F) + Math.random() * 500.0D);
      this.A5Yoffset = (float)((double)(this.A3Yoffset - 1000.0F) + Math.random() * -750.0D);
      this.strings = new String[]{"Giraud", "Druilet", "Jodorowsky", "Bourgeon", "Mézières", "Tardi", "Dionnet"};
      this.nameSelector = this.random.nextInt(this.strings.length);
      this.StarName = this.strings[this.nameSelector];
   }

   public void generate(SectorAPI sector) {
      LocationAPI hyper = Global.getSector().getHyperspace();
      StarAge istl_constellation_Age = StarAge.ANY;
      if (this.selector < 0.33F) {
         istl_constellation_Age = StarAge.YOUNG;
      }

      if (this.selector >= 0.33F && this.selector < 0.66F) {
         istl_constellation_Age = StarAge.AVERAGE;
      }

      if (this.selector >= 0.66F) {
         istl_constellation_Age = StarAge.OLD;
      }

      Constellation istl_constellation_Besson = new Constellation(ConstellationType.NORMAL, istl_constellation_Age);
      NameGenData data = new NameGenData("null", "null");
      NamePick constname = new NamePick(data, this.strings[this.nameSelector], "null");
      istl_constellation_Besson.setNamePick(constname);
      StarSystemAPI system_besson = sector.createStarSystem("Alpha " + this.StarName);
      StarSystemAPI system_two = sector.createStarSystem("Beta " + this.StarName);
      StarSystemAPI system_three = sector.createStarSystem("Gamma " + this.StarName);
      StarSystemAPI system_four = sector.createStarSystem("Delta " + this.StarName);
      StarSystemAPI system_five = sector.createStarSystem("Epsilon " + this.StarName);
      istl_constellation_Besson.getSystems().add(sector.getStarSystem("Alpha " + this.StarName));
      istl_constellation_Besson.getSystems().add(sector.getStarSystem("Beta " + this.StarName));
      istl_constellation_Besson.getSystems().add(sector.getStarSystem("Gamma " + this.StarName));
      istl_constellation_Besson.getSystems().add(sector.getStarSystem("Delta " + this.StarName));
      istl_constellation_Besson.getSystems().add(sector.getStarSystem("Epsilon " + this.StarName));
      sector.getStarSystem("Alpha " + this.StarName).setConstellation(istl_constellation_Besson);
      sector.getStarSystem("Beta " + this.StarName).setConstellation(istl_constellation_Besson);
      sector.getStarSystem("Gamma " + this.StarName).setConstellation(istl_constellation_Besson);
      sector.getStarSystem("Delta " + this.StarName).setConstellation(istl_constellation_Besson);
      sector.getStarSystem("Epsilon " + this.StarName).setConstellation(istl_constellation_Besson);
      system_besson.setBackgroundTextureFilename("graphics/backgrounds/background4.jpg");
      SectorEntityToken besson_nebula = Misc.addNebulaFromPNG("data/campaign/terrain/eos_nebula.png", 0.0F, 0.0F, system_besson, "terrain", "istl_nebula_sigma", 4, 4, StarAge.OLD);
      PlanetAPI besson_star = system_besson.initStar("besson", "star_blue_giant", 1350.0F, this.hsLocationX + this.spawnXoffset + this.A1Xoffset, this.hsLocationY + this.spawnYoffset + this.A1Yoffset, 900.0F);
      system_besson.setLightColor(new Color(210, 230, 255));
      system_besson.addTag("theme_breakers");
      system_besson.addTag("theme_breakers_main");
      system_besson.addTag("theme_breakers_resurgent");
      system_besson.addTag("theme_breakers_homeworld");
      system_besson.addTag("theme_unsafe");
      system_besson.addTag("theme_hidden");
      BladeBreakerThemeGenerator.addBeacon(system_besson, BladeBreakerThemeGenerator.BladeBreakerSystemType.RESURGENT);
      system_besson.addTag("sun_sl_hidden");
      system_besson.addAsteroidBelt(besson_star, 75, 2400.0F, 100.0F, 30.0F, 90.0F, "asteroid_belt", (String)null);
      system_besson.addRingBand(besson_star, "misc", "rings_dust0", 256.0F, 1, Color.white, 256.0F, 2350.0F, 300.0F, "asteroid_belt", (String)null);
      DebrisFieldParams params1 = new DebrisFieldParams(360.0F, 1.2F, 1.0E7F, 0.0F);
      params1.source = DebrisFieldSource.MIXED;
      params1.baseSalvageXP = 500L;
      SectorEntityToken debrisInner1 = Misc.addDebrisField(system_besson, params1, StarSystemGenerator.random);
      debrisInner1.setSensorProfile(800.0F);
      debrisInner1.setDiscoverable(true);
      debrisInner1.setCircularOrbit(besson_star, 360.0F * (float)Math.random(), 2375.0F, 210.0F);
      debrisInner1.setId("besson_debrisInner1");
      SectorEntityToken besson_field1 = system_besson.addTerrain("magnetic_field", new MagneticFieldParams(700.0F, 2850.0F, besson_star, 2500.0F, 3200.0F, new Color(50, 30, 100, 30), 0.3F, new Color[]{new Color(50, 20, 110, 130), new Color(150, 30, 120, 150), new Color(200, 50, 130, 190), new Color(250, 70, 150, 240), new Color(200, 80, 130, 255), new Color(75, 0, 160), new Color(127, 0, 255)}));
      besson_field1.setCircularOrbit(besson_star, 0.0F, 0.0F, 120.0F);
      SectorEntityToken fueldump = DerelictThemeGenerator.addSalvageEntity(system_besson, "supply_cache", "derelict");
      fueldump.setId("besson_fueldump");
      fueldump.setCircularOrbit(besson_star, 360.0F * (float)Math.random(), 3750.0F, 300.0F);
      fueldump.setDiscoverable(Boolean.TRUE);
      SectorEntityToken shipDerelict2 = DerelictThemeGenerator.addSalvageEntity(system_besson, "derelict_probe", "derelict");
      shipDerelict2.setId("besson_probe1");
      shipDerelict2.setCircularOrbit(besson_star, 360.0F * (float)Math.random(), 4250.0F, 320.0F);
      Misc.setDefenderOverride(shipDerelict2, new DefenderDataOverride("blade_breakers", 1.0F, 3.0F, 7.0F));
      SectorEntityToken besson_inner_loc = system_besson.addCustomEntity((String)null, (String)null, "stable_location", "neutral");
      besson_inner_loc.setCircularOrbitPointingDown(besson_star, 360.0F * (float)Math.random(), 4800.0F, 300.0F);
      PlanetAPI lenze = system_besson.addPlanet("istl_planet_lenze", besson_star, "Lenze", "istl_sigmaworld", 145.0F, 150.0F, 5600.0F, -180.0F);
      lenze.getSpec().setGlowTexture(Global.getSettings().getSpriteName("hab_glows", "aurorae"));
      lenze.getSpec().setGlowColor(new Color(165, 215, 255, 255));
      lenze.getSpec().setUseReverseLightForGlow(true);
      lenze.getSpec().setShieldTexture(Global.getSettings().getSpriteName("industry", "istl_shield_texture"));
      lenze.getSpec().setShieldThickness(0.06F);
      lenze.getSpec().setShieldColor(new Color(255, 255, 255, 100));
      lenze.applySpecChanges();
      Misc.initConditionMarket(lenze);
      lenze.getMarket().addCondition("istl_sigmarad");
      lenze.getMarket().addCondition("extreme_tectonic_activity");
      lenze.getMarket().addCondition("extreme_weather");
      lenze.getMarket().addCondition("irradiated");
      lenze.getMarket().addCondition("ore_ultrarich");
      lenze.getMarket().addCondition("rare_ore_rich");
      lenze.getMarket().addCondition("ruins_scattered");
      system_besson.addRingBand(lenze, "misc", "rings_dust0", 96.0F, 1, Color.white, 32.0F, 180.0F, 75.0F, "asteroid_belt", (String)null);
      system_besson.addCorona(lenze, "corona_sigma", 150.0F, 15.0F, 0.0F, 2.0F);
      SectorEntityToken lenze_field1 = system_besson.addTerrain("magnetic_field", new MagneticFieldParams(200.0F, 190.0F, lenze, 145.0F, 345.0F, new Color(50, 30, 100, 120), 0.5F, new Color[]{new Color(50, 20, 110, 130), new Color(150, 30, 120, 150), new Color(200, 50, 130, 190), new Color(250, 70, 150, 240), new Color(200, 80, 130, 255), new Color(75, 0, 160), new Color(127, 0, 255)}));
      lenze_field1.setCircularOrbit(lenze, 0.0F, 0.0F, 70.0F);
      SectorEntityToken lenze_field2 = system_besson.addTerrain("magnetic_field", new MagneticFieldParams(600.0F, 300.0F, lenze, 150.0F, 750.0F, new Color(10, 25, 60, 5), 0.1F, new Color[]{new Color(25, 60, 150, 120), new Color(40, 90, 180, 135), new Color(50, 105, 195, 165), new Color(60, 120, 210, 185), new Color(70, 145, 225, 195), new Color(10, 0, 125), new Color(15, 50, 100)}));
      lenze_field2.setCircularOrbit(lenze, 0.0F, 0.0F, 85.0F);
      SectorEntityToken lenze_field3 = system_besson.addTerrain("magnetic_field", new MagneticFieldParams(90.0F, 185.0F, lenze, 140.0F, 230.0F, new Color(165, 215, 255, 120), 0.0F, new Color[]{new Color(25, 60, 150, 100), new Color(40, 90, 180, 115), new Color(50, 105, 195, 145), new Color(60, 120, 210, 160), new Color(70, 145, 225, 170), new Color(10, 0, 125), new Color(15, 50, 100)}));
      lenze_field3.setCircularOrbit(lenze, 0.0F, 0.0F, 120.0F);
      lenze.setCustomDescriptionId("planet_lenze");
      CustomCampaignEntityAPI beacon = system_besson.addCustomEntity((String)null, (String)null, "istl_bladebreaker_beacon", "neutral");
      beacon.setCircularOrbitPointingDown(lenze, 0.0F, 500.0F, -35.0F);
      beacon.getMemoryWithoutUpdate().set("$istl_lenzewarn", true);
      FleetMemberAPI member1 = Global.getFactory().createFleetMember(FleetMemberType.SHIP, "istl_bbsuperheavy_std");
      member1.getRepairTracker().setCR(member1.getRepairTracker().getMaxCR());
      CampaignFleetAPI fleet1 = FleetFactoryV3.createEmptyFleet("blade_breakers", "battlestation", (MarketAPI)null);
      fleet1.getFleetData().addFleetMember(member1);
      fleet1.getMemoryWithoutUpdate().set("$cfai_makeAggressive", true);
      fleet1.getMemoryWithoutUpdate().set("$cfai_noJump", true);
      fleet1.getMemoryWithoutUpdate().set("$cfai_makeAllowDisengage", true);
      fleet1.setStationMode(true);
      BladeBreakerThemeGenerator.addBladeBreakerStationInteractionConfig(fleet1);
      system_besson.addEntity(fleet1);
      fleet1.clearAbilities();
      fleet1.addAbility("transponder");
      fleet1.getAbility("transponder").activate();
      fleet1.getDetectedRangeMod().modifyFlat("gen", 1000.0F);
      fleet1.setCircularOrbitWithSpin(lenze, 60.0F, 300.0F, 28.0F, 7.0F, 12.0F);
      fleet1.setAI((CampaignFleetAIAPI)null);
      PersonAPI commander1 = OfficerManagerEvent.createOfficer(Global.getSector().getFaction("blade_breakers"), SigmaUtils.level, true);
      commander1.getStats().setSkillLevel("gunnery_implants", 3.0F);
      FleetFactoryV3.addCommanderSkills(commander1, fleet1, this.random);
      fleet1.setCommander(commander1);
      fleet1.getFlagship().setCaptain(commander1);
      FleetMemberAPI member2 = Global.getFactory().createFleetMember(FleetMemberType.SHIP, "istl_bbsuperheavy_std");
      member2.getRepairTracker().setCR(member2.getRepairTracker().getMaxCR());
      CampaignFleetAPI fleet2 = FleetFactoryV3.createEmptyFleet("blade_breakers", "battlestation", (MarketAPI)null);
      fleet2.getFleetData().addFleetMember(member2);
      fleet2.getMemoryWithoutUpdate().set("$cfai_makeAggressive", true);
      fleet2.getMemoryWithoutUpdate().set("$cfai_noJump", true);
      fleet2.getMemoryWithoutUpdate().set("$cfai_makeAllowDisengage", true);
      fleet2.setStationMode(true);
      BladeBreakerThemeGenerator.addBladeBreakerStationInteractionConfig(fleet2);
      system_besson.addEntity(fleet2);
      fleet2.clearAbilities();
      fleet2.addAbility("transponder");
      fleet2.getAbility("transponder").activate();
      fleet2.getDetectedRangeMod().modifyFlat("gen", 1000.0F);
      fleet2.setCircularOrbitWithSpin(lenze, 180.0F, 300.0F, 28.0F, 7.0F, 12.0F);
      fleet2.setAI((CampaignFleetAIAPI)null);
      PersonAPI commander2 = OfficerManagerEvent.createOfficer(Global.getSector().getFaction("blade_breakers"), SigmaUtils.level, true);
      commander2.getStats().setSkillLevel("gunnery_implants", 3.0F);
      FleetFactoryV3.addCommanderSkills(commander2, fleet2, this.random);
      fleet2.setCommander(commander2);
      fleet2.getFlagship().setCaptain(commander2);
      FleetMemberAPI member3 = Global.getFactory().createFleetMember(FleetMemberType.SHIP, "istl_bbsuperheavy_std");
      member3.getRepairTracker().setCR(member3.getRepairTracker().getMaxCR());
      CampaignFleetAPI fleet3 = FleetFactoryV3.createEmptyFleet("blade_breakers", "battlestation", (MarketAPI)null);
      fleet3.getFleetData().addFleetMember(member3);
      fleet3.getMemoryWithoutUpdate().set("$cfai_makeAggressive", true);
      fleet3.getMemoryWithoutUpdate().set("$cfai_noJump", true);
      fleet3.getMemoryWithoutUpdate().set("$cfai_makeAllowDisengage", true);
      fleet3.setStationMode(true);
      BladeBreakerThemeGenerator.addBladeBreakerStationInteractionConfig(fleet3);
      system_besson.addEntity(fleet3);
      fleet3.clearAbilities();
      fleet3.addAbility("transponder");
      fleet3.getAbility("transponder").activate();
      fleet3.getDetectedRangeMod().modifyFlat("gen", 1000.0F);
      fleet3.setCircularOrbitWithSpin(lenze, 300.0F, 300.0F, 28.0F, 7.0F, 12.0F);
      fleet3.setAI((CampaignFleetAIAPI)null);
      PersonAPI commander3 = OfficerManagerEvent.createOfficer(Global.getSector().getFaction("blade_breakers"), SigmaUtils.level, true);
      commander3.getStats().setSkillLevel("gunnery_implants", 3.0F);
      FleetFactoryV3.addCommanderSkills(commander3, fleet3, this.random);
      fleet3.setCommander(commander3);
      fleet3.getFlagship().setCaptain(commander3);
      int maxFleets = 7 + this.random.nextInt(2);
      BladeBreakerStationFleetManager guardian1Fleets = new BladeBreakerStationFleetManager(fleet1, 1.0F, 0, maxFleets, 10.0F, 9, 27);
      BladeBreakerStationFleetManager guardian2Fleets = new BladeBreakerStationFleetManager(fleet2, 1.0F, 0, maxFleets, 10.0F, 12, 36);
      BladeBreakerStationFleetManager guardian3Fleets = new BladeBreakerStationFleetManager(fleet3, 1.0F, 0, maxFleets, 10.0F, 9, 27);
      system_besson.addScript(guardian1Fleets);
      system_besson.addScript(guardian2Fleets);
      system_besson.addScript(guardian3Fleets);
      JumpPointAPI jumpPoint1 = Global.getFactory().createJumpPoint("besson_inner_jump", "Alpha " + this.StarName + " Jump-point");
      jumpPoint1.setCircularOrbit(system_besson.getEntityById("besson"), 300.0F, 7200.0F, 240.0F);
      system_besson.addEntity(jumpPoint1);
      system_besson.addAsteroidBelt(besson_star, 90, 7750.0F, 480.0F, 95.0F, 120.0F, "asteroid_belt", "Nikita Belt");
      system_besson.addRingBand(besson_star, "misc", "rings_dust0", 256.0F, 0, Color.gray, 256.0F, 7600.0F, 105.0F, (String)null, (String)null);
      system_besson.addRingBand(besson_star, "misc", "rings_asteroids0", 256.0F, 1, Color.white, 256.0F, 7720.0F, 125.0F, (String)null, (String)null);
      system_besson.addAsteroidBelt(besson_star, 90, 8400.0F, 540.0F, 105.0F, 135.0F, "asteroid_belt", "Paradise Belt");
      system_besson.addRingBand(besson_star, "misc", "rings_dust0", 256.0F, 0, Color.gray, 256.0F, 8450.0F, 128.0F, (String)null, (String)null);
      DebrisFieldParams params2 = new DebrisFieldParams(360.0F, 1.2F, 1.0E7F, 0.0F);
      params2.source = DebrisFieldSource.MIXED;
      params2.baseSalvageXP = 500L;
      SectorEntityToken debrisInner2 = Misc.addDebrisField(system_besson, params2, StarSystemGenerator.random);
      debrisInner2.setSensorProfile(800.0F);
      debrisInner2.setDiscoverable(true);
      debrisInner2.setCircularOrbit(besson_star, 360.0F * (float)Math.random(), 7720.0F, 180.0F);
      debrisInner2.setId("besson_debrisInner2");
      DebrisFieldParams params3 = new DebrisFieldParams(240.0F, 1.0F, 1.0E7F, 0.0F);
      params3.source = DebrisFieldSource.MIXED;
      params3.baseSalvageXP = 350L;
      SectorEntityToken debrisInner3 = Misc.addDebrisField(system_besson, params3, StarSystemGenerator.random);
      debrisInner3.setSensorProfile(600.0F);
      debrisInner3.setDiscoverable(true);
      debrisInner3.setCircularOrbit(besson_star, 360.0F * (float)Math.random(), 7720.0F, 180.0F);
      debrisInner3.setId("besson_debrisInner3");
      DebrisFieldParams params4 = new DebrisFieldParams(360.0F, 1.2F, 1.0E7F, 0.0F);
      params4.source = DebrisFieldSource.MIXED;
      params4.baseSalvageXP = 500L;
      SectorEntityToken debrisInner4 = Misc.addDebrisField(system_besson, params4, StarSystemGenerator.random);
      debrisInner4.setSensorProfile(800.0F);
      debrisInner4.setDiscoverable(true);
      debrisInner4.setCircularOrbit(besson_star, 360.0F * (float)Math.random(), 8425.0F, 210.0F);
      debrisInner4.setId("besson_debrisInner4");
      SectorEntityToken besson_relay = system_besson.addCustomEntity("besson_relay", "Alpha " + this.StarName + " Relay", "comm_relay", "neutral");
      besson_relay.setCircularOrbitPointingDown(system_besson.getEntityById("besson"), 120.0F, 9600.0F, 400.0F);
      SectorEntityToken besson_l1_loc = system_besson.addCustomEntity((String)null, (String)null, "stable_location", "neutral");
      besson_l1_loc.setCircularOrbitPointingDown(besson_star, 300.0F, 9600.0F, 400.0F);
      PlanetAPI marat = system_besson.addPlanet("marat", besson_star, "Marat", "ice_giant", 120.0F, 350.0F, 12800.0F, 400.0F);
      marat.setCustomDescriptionId("planet_marat");
      system_besson.addRingBand(marat, "misc", "rings_dust0", 256.0F, 0, Color.white, 128.0F, 450.0F, 135.0F, (String)null, (String)null);
      PlanetAPI marat1 = system_besson.addPlanet("istl_planet_marat1", marat, "Marat I", "cryovolcanic", 75.0F, 45.0F, 540.0F, 180.0F);
      Misc.initConditionMarket(marat1);
      marat1.getMarket().addCondition("thin_atmosphere");
      marat1.getMarket().addCondition("low_gravity");
      marat1.getMarket().addCondition("cold");
      marat1.getMarket().addCondition("volatiles_abundant");
      system_besson.addRingBand(marat, "misc", "rings_special0", 256.0F, 1, new Color(180, 180, 180, 255), 160.0F, 760.0F, 30.0F, "ring", (String)null);
      PlanetAPI marat2 = system_besson.addPlanet("istl_planet_marat2", marat, "Marat II", "frozen", 135.0F, 90.0F, 1100.0F, 200.0F);
      Misc.initConditionMarket(marat2);
      marat2.getMarket().addCondition("cold");
      marat2.getMarket().addCondition("ore_sparse");
      marat2.getMarket().addCondition("volatiles_trace");
      marat2.getMarket().addCondition("organics_common");
      marat2.getMarket().addCondition("ruins_widespread");
      system_besson.addRingBand(marat, "misc", "rings_dust0", 256.0F, 0, Color.gray, 192.0F, 1350.0F, 160.0F, (String)null, (String)null);
      PlanetAPI marat3 = system_besson.addPlanet("istl_planet_marat3", marat, "Marat III", "barren", 215.0F, 60.0F, 1560.0F, 220.0F);
      Misc.initConditionMarket(marat3);
      marat3.getMarket().addCondition("no_atmosphere");
      marat3.getMarket().addCondition("low_gravity");
      marat3.getMarket().addCondition("very_cold");
      marat3.getMarket().addCondition("ore_moderate");
      marat3.getMarket().addCondition("ruins_scattered");
      SectorEntityToken shipDerelict1 = DerelictThemeGenerator.addSalvageEntity(system_besson, "derelict_survey_ship", "derelict");
      shipDerelict1.setId("besson_surveyship");
      shipDerelict1.setCircularOrbit(marat, 225.0F, 600.0F, 180.0F);
      Misc.setDefenderOverride(shipDerelict1, new DefenderDataOverride("blade_breakers", 1.0F, 7.0F, 15.0F));
      SectorEntityToken shipDerelict3 = DerelictThemeGenerator.addSalvageEntity(system_besson, "derelict_probe", "derelict");
      shipDerelict3.setId("besson_probe2");
      shipDerelict3.setCircularOrbit(marat, 360.0F * (float)Math.random(), 1960.0F, 270.0F);
      Misc.setDefenderOverride(shipDerelict3, new DefenderDataOverride("blade_breakers", 1.0F, 3.0F, 7.0F));
      PlanetAPI besson_star_b = system_besson.addPlanet("lucille", besson_star, "Alpha " + this.StarName + " B", "star_browndwarf", 300.0F, 560.0F, 12800.0F, 400.0F);
      system_besson.setSecondary(besson_star_b);
      SectorEntityToken lucille_field1 = system_besson.addTerrain("magnetic_field", new MagneticFieldParams(200.0F, 660.0F, besson_star_b, 560.0F, 760.0F, new Color(50, 30, 100, 60), 0.6F, new Color[]{new Color(50, 20, 110, 130), new Color(150, 30, 120, 150), new Color(200, 50, 130, 190), new Color(250, 70, 150, 240), new Color(200, 80, 130, 255), new Color(75, 0, 160), new Color(127, 0, 255)}));
      lucille_field1.setCircularOrbit(besson_star_b, 0.0F, 0.0F, 100.0F);
      system_besson.addRingBand(besson_star_b, "misc", "rings_dust0", 256.0F, 1, Color.gray, 256.0F, 960.0F, 100.0F);
      system_besson.addAsteroidBelt(besson_star_b, 120, 960.0F, 300.0F, 200.0F, 300.0F, "asteroid_belt", "Laplace Stream");
      SectorEntityToken lucille_field2 = system_besson.addTerrain("magnetic_field", new MagneticFieldParams(120.0F, 1140.0F, besson_star_b, 1080.0F, 1200.0F, new Color(50, 30, 100, 30), 0.3F, new Color[]{new Color(50, 20, 110, 130), new Color(150, 30, 120, 150), new Color(200, 50, 130, 190), new Color(250, 70, 150, 240), new Color(200, 80, 130, 255), new Color(75, 0, 160), new Color(127, 0, 255)}));
      lucille_field2.setCircularOrbit(besson_star_b, 0.0F, 0.0F, 100.0F);
      PlanetAPI lucille1 = system_besson.addPlanet("istl_planet_lucille1", besson_star_b, "Alpha " + this.StarName + " B I", "barren-bombarded", 360.0F * (float)Math.random(), 40.0F, 1280.0F, 140.0F);
      Misc.initConditionMarket(lucille1);
      lucille1.getMarket().addCondition("no_atmosphere");
      lucille1.getMarket().addCondition("low_gravity");
      lucille1.getMarket().addCondition("meteor_impacts");
      PlanetAPI lucille2 = system_besson.addPlanet("istl_planet_lucille2", besson_star_b, "Source", "terran-eccentric", 360.0F * (float)Math.random(), 60.0F, 1600.0F, 180.0F);
      Misc.initConditionMarket(lucille2);
      lucille2.getMarket().addCondition("habitable");
      lucille2.getMarket().addCondition("low_gravity");
      lucille2.getMarket().addCondition("farmland_rich");
      lucille2.getMarket().addCondition("ruins_widespread");
      lucille2.setCustomDescriptionId("planet_source");
      this.addDerelict(system_besson, lucille2, "tempest_righthand", ShipCondition.GOOD, 120.0F, true, "the_deserter");
      SectorEntityToken lucilleL4 = system_besson.addTerrain("asteroid_field", new AsteroidFieldParams(920.0F, 1280.0F, 40, 72, 8.0F, 24.0F, "Alpha " + this.StarName + " B L4 Shoal Zone"));
      SectorEntityToken lucilleL5 = system_besson.addTerrain("asteroid_field", new AsteroidFieldParams(920.0F, 1280.0F, 40, 72, 8.0F, 24.0F, "Alpha " + this.StarName + " B L5 Shoal Zone"));
      lucilleL4.setCircularOrbit(besson_star, 360.0F, 12800.0F, 400.0F);
      lucilleL5.setCircularOrbit(besson_star, 240.0F, 12800.0F, 400.0F);
      SectorEntityToken stationDerelict1 = DerelictThemeGenerator.addSalvageEntity(system_besson, "istl_bladebreaker_mining", "blade_breakers");
      stationDerelict1.setId("besson_derelict1");
      stationDerelict1.setCircularOrbit(besson_star, 360.0F, 12800.0F, 400.0F);
      Misc.setDefenderOverride(stationDerelict1, new DefenderDataOverride("blade_breakers", 1.0F, 5.0F, 11.0F));
      CargoAPI extraStation1Salvage = Global.getFactory().createCargo(true);
      extraStation1Salvage.addCommodity("istl_sigma_matter2", 1.0F);
      extraStation1Salvage.addCommodity("istl_sigma_matter1", 3.0F);
      extraStation1Salvage.addCommodity("istl_sigma_matter3", 6.0F);
      BaseSalvageSpecial.addExtraSalvage(extraStation1Salvage, stationDerelict1.getMemoryWithoutUpdate(), -1.0F);
      SectorEntityToken l5scrap = DerelictThemeGenerator.addSalvageEntity(system_besson, "weapons_cache_breakers", "blade_breakers");
      l5scrap.setId("besson_l5scrap");
      l5scrap.setCircularOrbit(besson_star, 240.0F, 12800.0F, 400.0F);
      Misc.setDefenderOverride(l5scrap, new DefenderDataOverride("blade_breakers", 1.0F, 3.0F, 7.0F));
      l5scrap.setDiscoverable(Boolean.TRUE);
      this.addDerelict(system_besson, l5scrap, "istl_bbminerunner_std", ShipCondition.AVERAGE, 180.0F, true, "the_deserter");
      SectorEntityToken stationDerelict3 = DerelictThemeGenerator.addSalvageEntity(system_besson, "istl_bladebreaker_research", "blade_breakers");
      stationDerelict3.setId("besson_derelict3");
      stationDerelict3.setCircularOrbit(besson_star, 300.0F, 16000.0F, 400.0F);
      Misc.setDefenderOverride(stationDerelict3, new DefenderDataOverride("blade_breakers", 1.0F, 15.0F, 36.0F));
      CargoAPI extraStation2Salvage = Global.getFactory().createCargo(true);
      extraStation2Salvage.addCommodity("alpha_core", 1.0F);
      extraStation2Salvage.addCommodity("istl_sigma_matter1", 2.0F);
      BaseSalvageSpecial.addExtraSalvage(extraStation2Salvage, stationDerelict3.getMemoryWithoutUpdate(), -1.0F);
      system_besson.addPlanet("istl_planet_besson4", besson_star, "Alpha " + this.StarName + " IV", "barren", 360.0F * (float)Math.random(), 60.0F, 17600.0F, 480.0F);
      float radius_nevsky = 18400.0F + 800.0F * (float)Math.random();
      SectorEntityToken bessonHabitat = system_besson.addCustomEntity("besson_habitat", "Nevsky Polis", "station_side07", "neutral");
      system_besson.addRingBand(besson_star, "misc", "rings_dust0", 256.0F, 3, Color.white, 256.0F, radius_nevsky, 520.0F, "ring", "Outer Band");
      bessonHabitat.setCircularOrbitWithSpin(system_besson.getEntityById("besson"), 360.0F * (float)Math.random(), radius_nevsky, 480.0F, 9.0F, 21.0F);
      bessonHabitat.setDiscoverable(true);
      bessonHabitat.setDiscoveryXP(3500.0F);
      bessonHabitat.setSensorProfile(0.3F);
      bessonHabitat.getMemoryWithoutUpdate().set("$abandonedStation", true);
      Misc.setAbandonedStationMarket("abandoned_habitat_market", bessonHabitat);
      bessonHabitat.getMarket().getSubmarket("storage").getCargo().addSpecial(new SpecialItemData("istl_sigmatech_package", (String)null), 1.0F);
      bessonHabitat.getMarket().getSubmarket("storage").getCargo().addSpecial(new SpecialItemData("istl_deserter_package", (String)null), 1.0F);
      bessonHabitat.getMarket().getSubmarket("storage").getCargo().addSpecial(new SpecialItemData("istl_bladewood_package", (String)null), 1.0F);
      bessonHabitat.setCustomDescriptionId("station_besson");
      StarSystemGenerator.addOrbitingEntities(system_besson, besson_star, StarAge.AVERAGE, 2, 5, 21600.0F, 4, true);
      system_besson.autogenerateHyperspaceJumpPoints(true, true);
      this.cleanup(system_besson);
      system_two.setBackgroundTextureFilename("graphics/backgrounds/background3.jpg");
      PlanetAPI two_star = system_two.initStar("Beta " + this.StarName, "star_orange", 345.0F, this.hsLocationX + this.spawnXoffset + this.A2Xoffset, this.hsLocationY + this.spawnYoffset + this.A2Yoffset, 255.0F);
      system_two.setLightColor(new Color(255, 225, 205));
      system_two.addTag("theme_breakers");
      system_two.addTag("theme_breakers_main");
      system_two.addTag("theme_breakers_suppressed");
      system_two.addTag("theme_unsafe");
      BladeBreakerThemeGenerator.addBeacon(system_two, BladeBreakerThemeGenerator.BladeBreakerSystemType.SUPPRESSED);
      system_two.addTag("sun_sl_hidden");
      two_star.setName("Beta " + this.StarName);
      system_two.setName("Beta " + this.StarName + " Star System");
      StarSystemGenerator.addSystemwideNebula(system_two, istl_constellation_Age);
      FleetMemberAPI member4 = Global.getFactory().createFleetMember(FleetMemberType.SHIP, "istl_guardian_turret_std");
      member4.getRepairTracker().setCR(member4.getRepairTracker().getMaxCR());
      CampaignFleetAPI fleet4 = FleetFactoryV3.createEmptyFleet("blade_breakers", "battlestation", (MarketAPI)null);
      float radius_fleet4 = radius_star + radius_acolyte + 1200.0F + radius_variation * (float)Math.random();
      fleet4.getFleetData().addFleetMember(member4);
      fleet4.getMemoryWithoutUpdate().set("$cfai_makeAggressive", true);
      fleet4.getMemoryWithoutUpdate().set("$cfai_noJump", true);
      fleet4.getMemoryWithoutUpdate().set("$cfai_makeAllowDisengage", true);
      fleet4.setStationMode(true);
      BladeBreakerThemeGenerator.addBladeBreakerStationInteractionConfig(fleet4);
      system_two.addEntity(fleet4);
      fleet4.clearAbilities();
      fleet4.addAbility("transponder");
      fleet4.getAbility("transponder").activate();
      fleet4.getDetectedRangeMod().modifyFlat("gen", 1000.0F);
      fleet4.setCircularOrbitWithSpin(two_star, 0.0F + (float)Math.random() * 5.0F, radius_fleet4, 240.0F, 7.0F, 12.0F);
      fleet4.setAI((CampaignFleetAIAPI)null);
      PersonAPI commander4 = OfficerManagerEvent.createOfficer(Global.getSector().getFaction("blade_breakers"), SigmaUtils.level, true);
      commander4.getStats().setSkillLevel("gunnery_implants", 3.0F);
      FleetFactoryV3.addCommanderSkills(commander4, fleet4, this.random);
      fleet4.setCommander(commander4);
      fleet4.getFlagship().setCaptain(commander4);
      BladeBreakerStationFleetManager guardian4Fleets = new BladeBreakerStationFleetManager(fleet4, 1.0F, 0, maxFleets, 10.0F, 4, 12);
      system_two.addScript(guardian4Fleets);
      float radius_curse = radius_fleet4 - 2450.0F;
      system_two.addRingBand(two_star, "misc", "rings_dust0", 256.0F, 3, Color.white, 256.0F, radius_curse, 90.0F, "ring", "Karres Dust Band");
      this.addDerelict(system_two, two_star, "istl_curse_proto_test", ShipCondition.GOOD, radius_curse, true, "the_deserter");
      this.addDerelict(system_two, two_star, "istl_imp_proto_test", ShipCondition.BATTERED, radius_curse - 100.0F, true, "the_deserter");
      this.addDerelict(system_two, two_star, "starliner_Standard", ShipCondition.GOOD, radius_curse + 75.0F, true, "independent");
      this.addDerelict(system_two, two_star, "istl_puddlejumper_mk1_std", ShipCondition.WRECKED, radius_curse - 75.0F, false, "independent");
      this.addDerelict(system_two, two_star, "mudskipper2_CS", ShipCondition.BATTERED, radius_curse - 25.0F, true, "independent");
      this.addDerelict(system_two, two_star, "wolf_Assault", ShipCondition.AVERAGE, radius_curse + 25.0F, false, "independent");
      this.addDerelict(system_two, two_star, "afflictor_Strike", ShipCondition.WRECKED, radius_curse + 50.0F, false, "independent");
      this.addDerelict(system_two, two_star, "nebula_Standard", ShipCondition.BATTERED, radius_curse + 125.0F, false, "independent");
      this.addDerelict(system_two, two_star, "tarsus_Standard", ShipCondition.AVERAGE, radius_curse - 50.0F, false, "independent");
      system_two.addRingBand(two_star, "misc", "rings_dust0", 256.0F, 3, Color.white, 256.0F, radius_curse + 300.0F, 115.0F, "ring", "Tears Of Laureline");
      system_two.addRingBand(two_star, "misc", "rings_dust0", 256.0F, 2, Color.white, 256.0F, radius_curse + 350.0F, 120.0F, "ring", "Tears Of Laureline");
      system_two.addRingBand(two_star, "misc", "rings_dust0", 256.0F, 3, Color.white, 256.0F, radius_curse + 400.0F, 125.0F, "ring", "Tears Of Laureline");
      PlanetAPI laureline = system_two.addPlanet("istl_planet_laureline", two_star, "Laureline", "jungle", 300.0F, 120.0F, 6400.0F, 210.0F);
      laureline.setCustomDescriptionId("planet_laureline");
      laureline.getSpec().setGlowTexture(Global.getSettings().getSpriteName("hab_glows", "asharu"));
      laureline.getSpec().setGlowColor(new Color(255, 75, 25, 255));
      laureline.getSpec().setUseReverseLightForGlow(true);
      Misc.initConditionMarket(laureline);
      laureline.getMarket().addCondition("habitable");
      laureline.getMarket().addCondition("hot");
      laureline.getMarket().addCondition("decivilized");
      laureline.getMarket().addCondition("ruins_vast");
      laureline.getMarket().addCondition("inimical_biosphere");
      laureline.getMarket().addCondition("farmland_rich");
      laureline.getMarket().addCondition("organics_common");
      SectorEntityToken laureline_l4_loc = system_two.addCustomEntity((String)null, (String)null, "stable_location", "neutral");
      laureline_l4_loc.setCircularOrbitPointingDown(two_star, 240.0F, 6400.0F, 210.0F);
      SectorEntityToken laureline_l5_loc = system_two.addCustomEntity((String)null, (String)null, "stable_location", "neutral");
      laureline_l5_loc.setCircularOrbitPointingDown(two_star, 0.0F, 6400.0F, 210.0F);
      SectorEntityToken stationDerelict = DerelictThemeGenerator.addSalvageEntity(system_two, "orbital_habitat_remnant", "derelict");
      stationDerelict.setId("two_derelict");
      stationDerelict.setCircularOrbit(two_star, 120.0F, 6400.0F, 210.0F);
      Misc.setDefenderOverride(stationDerelict, new DefenderDataOverride("blade_breakers", 1.0F, 2.0F, 8.0F));
      CargoAPI extraStation3Salvage = Global.getFactory().createCargo(true);
      extraStation3Salvage.addCommodity("beta_core", 2.0F);
      extraStation3Salvage.addCommodity("istl_sigma_matter3", 3.0F);
      BaseSalvageSpecial.addExtraSalvage(extraStation3Salvage, stationDerelict.getMemoryWithoutUpdate(), -1.0F);
      system_two.addRingBand(two_star, "misc", "rings_dust0", 256.0F, 3, Color.white, 256.0F, 7200.0F, 240.0F, "ring", "Dust Band");
      StarSystemGenerator.addOrbitingEntities(system_two, two_star, istl_constellation_Age, 3, 5, 8000.0F, 0, true);
      system_two.autogenerateHyperspaceJumpPoints(true, true);
      this.cleanup(system_two);
      system_three.setBackgroundTextureFilename("graphics/backgrounds/background3.jpg");
      PlanetAPI three_star = system_three.initStar("Gamma " + this.StarName, "star_red_dwarf", 315.0F, this.hsLocationX + this.spawnXoffset + this.A3Xoffset, this.hsLocationY + this.spawnYoffset + this.A3Yoffset, 255.0F);
      system_three.setLightColor(new Color(255, 225, 205));
      system_three.addTag("theme_breakers");
      system_three.addTag("theme_breakers_main");
      system_three.addTag("theme_breakers_suppressed");
      system_three.addTag("theme_unsafe");
      system_three.addTag("sun_sl_hidden");
      three_star.setName("Gamma " + this.StarName);
      system_three.setName("Gamma " + this.StarName + " Star System");
      StarSystemGenerator.addSystemwideNebula(system_three, istl_constellation_Age);
      FleetMemberAPI member5 = Global.getFactory().createFleetMember(FleetMemberType.SHIP, "istl_guardian_turret_std");
      member5.getRepairTracker().setCR(member5.getRepairTracker().getMaxCR());
      CampaignFleetAPI fleet5 = FleetFactoryV3.createEmptyFleet("blade_breakers", "battlestation", (MarketAPI)null);
      float radius_fleet5 = radius_star + radius_acolyte + radius_variation * (float)Math.random();
      fleet5.getFleetData().addFleetMember(member5);
      fleet5.getMemoryWithoutUpdate().set("$cfai_makeAggressive", true);
      fleet5.getMemoryWithoutUpdate().set("$cfai_noJump", true);
      fleet5.getMemoryWithoutUpdate().set("$cfai_makeAllowDisengage", true);
      fleet5.setStationMode(true);
      BladeBreakerThemeGenerator.addBladeBreakerStationInteractionConfig(fleet5);
      system_three.addEntity(fleet5);
      fleet5.clearAbilities();
      fleet5.addAbility("transponder");
      fleet5.getAbility("transponder").activate();
      fleet5.getDetectedRangeMod().modifyFlat("gen", 1000.0F);
      fleet5.setCircularOrbitWithSpin(three_star, 0.0F + (float)Math.random() * 5.0F, radius_fleet5, 240.0F, 7.0F, 12.0F);
      fleet5.setAI((CampaignFleetAIAPI)null);
      PersonAPI commander5 = OfficerManagerEvent.createOfficer(Global.getSector().getFaction("blade_breakers"), SigmaUtils.level, true);
      commander5.getStats().setSkillLevel("gunnery_implants", 3.0F);
      FleetFactoryV3.addCommanderSkills(commander5, fleet5, this.random);
      fleet5.setCommander(commander5);
      fleet5.getFlagship().setCaptain(commander5);
      BladeBreakerStationFleetManager guardian5Fleets = new BladeBreakerStationFleetManager(fleet5, 1.0F, 0, maxFleets, 10.0F, 5, 14);
      system_three.addScript(guardian5Fleets);
      StarSystemGenerator.addOrbitingEntities(system_three, three_star, istl_constellation_Age, 4, 6, 2100.0F, 0, true);
      system_three.autogenerateHyperspaceJumpPoints(true, true);
      this.cleanup(system_three);
      system_four.setBackgroundTextureFilename("graphics/backgrounds/background3.jpg");
      PlanetAPI four_star = system_four.initStar("Delta " + this.StarName, "star_white", 375.0F, this.hsLocationX + this.spawnXoffset + this.A4Xoffset, this.hsLocationY + this.spawnYoffset + this.A4Yoffset, 255.0F);
      system_four.setLightColor(new Color(255, 225, 205));
      system_four.addTag("theme_breakers");
      system_four.addTag("theme_breakers_main");
      system_four.addTag("theme_breakers_suppressed");
      system_four.addTag("theme_unsafe");
      system_four.addTag("sun_sl_hidden");
      four_star.setName("Delta " + this.StarName);
      system_four.setName("Delta " + this.StarName + " Star System");
      StarSystemGenerator.addSystemwideNebula(system_four, istl_constellation_Age);
      system_four.addRingBand(four_star, "misc", "istl_blankring", 256.0F, 0, Color.BLACK, 2160.0F, 1900.0F, 69.0F, "ring", "Delta " + this.StarName + " Disk");
      float spiralFactor = 3.0F + StarSystemGenerator.random.nextFloat() * 2.0F;
      RingBandAPI accretionDisk1 = system_four.addRingBand(four_star, "misc", "rings_dust0", 256.0F, 0, Color.WHITE, 256.0F, 2500.0F, 54.0F);
      accretionDisk1.setSpiral(true);
      accretionDisk1.setMinSpiralRadius(150.0F);
      accretionDisk1.setSpiralFactor(spiralFactor);
      RingBandAPI accretionDisk2 = system_four.addRingBand(four_star, "misc", "rings_dust0", 256.0F, 1, Color.WHITE, 256.0F, 2550.0F, 64.0F);
      accretionDisk2.setSpiral(true);
      accretionDisk2.setMinSpiralRadius(250.0F);
      accretionDisk2.setSpiralFactor(spiralFactor);
      RingBandAPI accretionDisk3 = system_four.addRingBand(four_star, "misc", "rings_ice0", 256.0F, 0, Color.WHITE, 256.0F, 2600.0F, 74.0F);
      accretionDisk3.setSpiral(true);
      accretionDisk3.setMinSpiralRadius(300.0F);
      accretionDisk3.setSpiralFactor(spiralFactor);
      RingBandAPI accretionDisk4 = system_four.addRingBand(four_star, "misc", "rings_ice0", 256.0F, 1, Color.WHITE, 256.0F, 2750.0F, 84.0F);
      accretionDisk4.setSpiral(true);
      accretionDisk4.setMinSpiralRadius(350.0F);
      accretionDisk4.setSpiralFactor(spiralFactor);
      RingBandAPI accretionDisk5 = system_four.addRingBand(four_star, "misc", "rings_dust0", 256.0F, 0, Color.WHITE, 256.0F, 2800.0F, 54.0F);
      accretionDisk5.setSpiral(true);
      accretionDisk5.setMinSpiralRadius(150.0F);
      accretionDisk5.setSpiralFactor(spiralFactor);
      RingBandAPI accretionDisk6 = system_four.addRingBand(four_star, "misc", "rings_dust0", 256.0F, 1, Color.WHITE, 256.0F, 2850.0F, 64.0F);
      accretionDisk6.setSpiral(true);
      accretionDisk6.setMinSpiralRadius(250.0F);
      accretionDisk6.setSpiralFactor(spiralFactor);
      RingBandAPI accretionDisk7 = system_four.addRingBand(four_star, "misc", "rings_ice0", 256.0F, 0, Color.WHITE, 256.0F, 2900.0F, 74.0F);
      accretionDisk7.setSpiral(true);
      accretionDisk7.setMinSpiralRadius(300.0F);
      accretionDisk7.setSpiralFactor(spiralFactor);
      RingBandAPI accretionDisk8 = system_four.addRingBand(four_star, "misc", "rings_ice0", 256.0F, 1, Color.WHITE, 256.0F, 2950.0F, 84.0F);
      accretionDisk8.setSpiral(true);
      accretionDisk8.setMinSpiralRadius(350.0F);
      accretionDisk8.setSpiralFactor(spiralFactor);
      float radius_stationMining1 = radius_star + 400.0F + 2.0F * radius_variation * (float)Math.random();
      SectorEntityToken stationMining1 = DerelictThemeGenerator.addSalvageEntity(system_four, "istl_bladebreaker_mining", "blade_breakers");
      stationMining1.setId("four_mining1");
      stationMining1.setCircularOrbit(four_star, 360.0F * (float)Math.random(), radius_stationMining1, 320.0F);
      Misc.setDefenderOverride(stationMining1, new DefenderDataOverride("blade_breakers", 1.0F, 3.0F, 7.0F));
      CargoAPI extraMining1Salvage = Global.getFactory().createCargo(true);
      extraMining1Salvage.addCommodity("istl_sigma_matter1", 2.0F);
      extraMining1Salvage.addCommodity("istl_sigma_matter3", 5.0F);
      BaseSalvageSpecial.addExtraSalvage(extraMining1Salvage, stationMining1.getMemoryWithoutUpdate(), -1.0F);
      FleetMemberAPI member6 = Global.getFactory().createFleetMember(FleetMemberType.SHIP, "istl_guardian_turret_std");
      member6.getRepairTracker().setCR(member6.getRepairTracker().getMaxCR());
      CampaignFleetAPI fleet6 = FleetFactoryV3.createEmptyFleet("blade_breakers", "battlestation", (MarketAPI)null);
      float radius_fleet6 = radius_star + 3025.0F + radius_variation * (float)Math.random();
      fleet6.getFleetData().addFleetMember(member6);
      fleet6.getMemoryWithoutUpdate().set("$cfai_makeAggressive", true);
      fleet6.getMemoryWithoutUpdate().set("$cfai_noJump", true);
      fleet6.getMemoryWithoutUpdate().set("$cfai_makeAllowDisengage", true);
      fleet6.setStationMode(true);
      BladeBreakerThemeGenerator.addBladeBreakerStationInteractionConfig(fleet6);
      system_four.addEntity(fleet6);
      fleet6.clearAbilities();
      fleet6.addAbility("transponder");
      fleet6.getAbility("transponder").activate();
      fleet6.getDetectedRangeMod().modifyFlat("gen", 1000.0F);
      fleet6.setCircularOrbitWithSpin(four_star, 0.0F + (float)Math.random() * 5.0F, radius_fleet6, 240.0F, 7.0F, 12.0F);
      fleet6.setAI((CampaignFleetAIAPI)null);
      PersonAPI commander6 = OfficerManagerEvent.createOfficer(Global.getSector().getFaction("blade_breakers"), SigmaUtils.level, true);
      commander6.getStats().setSkillLevel("gunnery_implants", 3.0F);
      FleetFactoryV3.addCommanderSkills(commander6, fleet6, this.random);
      fleet6.setCommander(commander6);
      fleet6.getFlagship().setCaptain(commander6);
      new BladeBreakerStationFleetManager(fleet6, 1.0F, 0, maxFleets, 10.0F, 3, 9);
      system_four.addScript(guardian5Fleets);
      StarSystemGenerator.addOrbitingEntities(system_four, four_star, istl_constellation_Age, 4, 5, 4000.0F, 0, true);
      system_four.autogenerateHyperspaceJumpPoints(true, true);
      this.cleanup(system_four);
      system_five.setBackgroundTextureFilename("graphics/backgrounds/background3.jpg");
      PlanetAPI five_star = system_five.initStar("Epsilon " + this.StarName, "star_red_giant", 1200.0F, this.hsLocationX + this.spawnXoffset + this.A5Xoffset, this.hsLocationY + this.spawnYoffset + this.A5Yoffset, 800.0F);
      system_five.setLightColor(new Color(255, 210, 200));
      system_five.addTag("theme_breakers");
      system_five.addTag("theme_breakers_main");
      system_five.addTag("theme_breakers_suppressed");
      system_five.addTag("theme_unsafe");
      BladeBreakerThemeGenerator.addBeacon(system_five, BladeBreakerThemeGenerator.BladeBreakerSystemType.SUPPRESSED);
      system_five.addTag("sun_sl_hidden");
      five_star.setName("Epsilon " + this.StarName);
      system_five.setName("Epsilon " + this.StarName + " Star System");
      StarSystemGenerator.addSystemwideNebula(system_five, istl_constellation_Age);
      FleetMemberAPI member7 = Global.getFactory().createFleetMember(FleetMemberType.SHIP, "istl_bbsuperheavy_dmg");
      member7.getRepairTracker().setCR(member7.getRepairTracker().getMaxCR());
      CampaignFleetAPI fleet7 = FleetFactoryV3.createEmptyFleet("blade_breakers", "battlestation", (MarketAPI)null);
      float radius_fleet7 = 3400.0F + radius_variation * (float)Math.random();
      fleet7.getFleetData().addFleetMember(member7);
      fleet7.getMemoryWithoutUpdate().set("$cfai_makeAggressive", true);
      fleet7.getMemoryWithoutUpdate().set("$cfai_noJump", true);
      fleet7.getMemoryWithoutUpdate().set("$cfai_makeAllowDisengage", true);
      fleet7.setStationMode(true);
      BladeBreakerThemeGenerator.addBladeBreakerStationInteractionConfig(fleet7);
      system_five.addEntity(fleet7);
      fleet7.clearAbilities();
      fleet7.addAbility("transponder");
      fleet7.getAbility("transponder").activate();
      fleet7.getDetectedRangeMod().modifyFlat("gen", 1000.0F);
      fleet7.setCircularOrbitWithSpin(five_star, 0.0F + (float)Math.random() * 5.0F, radius_fleet7, 240.0F, 7.0F, 12.0F);
      fleet7.setAI((CampaignFleetAIAPI)null);
      PersonAPI commander7 = OfficerManagerEvent.createOfficer(Global.getSector().getFaction("blade_breakers"), SigmaUtils.level, true);
      commander7.getStats().setSkillLevel("gunnery_implants", 3.0F);
      FleetFactoryV3.addCommanderSkills(commander7, fleet7, this.random);
      fleet7.setCommander(commander7);
      fleet7.getFlagship().setCaptain(commander7);
      BladeBreakerStationFleetManager guardian7Fleets = new BladeBreakerStationFleetManager(fleet7, 1.0F, 0, maxFleets, 10.0F, 7, 18);
      system_five.addScript(guardian7Fleets);
      PlanetAPI yod2 = system_five.addPlanet("istl_planet_yod2", five_star, "Dzerzhinsky", "gas_giant", 300.0F, 450.0F, 2800.0F, 300.0F);
      yod2.getSpec().setGlowTexture(Global.getSettings().getSpriteName("hab_glows", "banded"));
      yod2.getSpec().setGlowColor(new Color(235, 38, 8, 145));
      yod2.getSpec().setUseReverseLightForGlow(true);
      yod2.getSpec().setAtmosphereThickness(0.5F);
      yod2.getSpec().setCloudRotation(15.0F);
      yod2.getSpec().setAtmosphereColor(new Color(138, 118, 255, 145));
      yod2.getSpec().setPitch(-5.0F);
      yod2.getSpec().setTilt(30.0F);
      yod2.applySpecChanges();
      Misc.initConditionMarket(yod2);
      yod2.getMarket().addCondition("very_hot");
      yod2.getMarket().addCondition("extreme_weather");
      yod2.getMarket().addCondition("dense_atmosphere");
      yod2.getMarket().addCondition("high_gravity");
      yod2.getMarket().addCondition("volatiles_diffuse");
      yod2.getMarket().addCondition("organics_trace");
      yod2.setCustomDescriptionId("planet_yod2");
      system_five.addCorona(yod2, "corona_aka_mainyu", 500.0F, 5.0F, 0.0F, 1.0F);
      PlanetAPI yod2a = system_five.addPlanet("istl_planet_yod2a", yod2, "Dzerzhinsky A", "barren", 180.0F, 30.0F, 660.0F, 50.0F);
      yod2a.getSpec().setTexture(Global.getSettings().getSpriteName("planets", "barren02"));
      yod2a.getSpec().setAtmosphereThickness(0.15F);
      yod2a.getSpec().setAtmosphereColor(new Color(138, 118, 255, 175));
      yod2a.applySpecChanges();
      Misc.initConditionMarket(yod2a);
      yod2a.getMarket().addCondition("no_atmosphere");
      yod2a.getMarket().addCondition("low_gravity");
      yod2a.getMarket().addCondition("hot");
      yod2a.getMarket().addCondition("ore_moderate");
      SectorEntityToken stationDerelict4 = DerelictThemeGenerator.addSalvageEntity(system_five, "istl_bladebreaker_research", "blade_breakers");
      stationDerelict4.setId("yod_derelict4");
      stationDerelict4.setCircularOrbitPointingDown(yod2, 0.0F, 650.0F, 50.0F);
      Misc.setDefenderOverride(stationDerelict4, new DefenderDataOverride("blade_breakers", 1.0F, 15.0F, 36.0F));
      PlanetAPI yod2b = system_five.addPlanet("istl_planet_yod2b", yod2, "Dzerzhinsky B", "barren-desert", 360.0F * (float)Math.random(), 75.0F, 900.0F, 90.0F);
      yod2b.getSpec().setAtmosphereThickness(0.35F);
      yod2b.getSpec().setCloudRotation(10.0F);
      yod2b.getSpec().setAtmosphereColor(new Color(138, 118, 255, 245));
      yod2b.applySpecChanges();
      Misc.initConditionMarket(yod2b);
      yod2b.getMarket().addCondition("thin_atmosphere");
      yod2b.getMarket().addCondition("hot");
      yod2b.getMarket().addCondition("ore_sparse");
      yod2b.getMarket().addCondition("ruins_scattered");
      yod2b.getMarket().addCondition("pollution");
      system_five.addCorona(yod2b, "corona_aka_mainyu", 150.0F, 2.0F, 0.0F, 0.5F);
      SectorEntityToken field = system_five.addTerrain("magnetic_field", new MagneticFieldParams(600.0F, 3450.0F, five_star, 3150.0F, 3750.0F, new Color(50, 20, 100, 40), 1.0F, new Color[]{new Color(50, 20, 110, 130), new Color(150, 30, 120, 150), new Color(200, 50, 130, 190), new Color(250, 70, 150, 240), new Color(200, 80, 130, 255), new Color(75, 0, 160), new Color(127, 0, 255)}));
      field.setCircularOrbit(five_star, 0.0F, 0.0F, 150.0F);
      float radius_sparrowhawk = 4200.0F;
      system_five.addRingBand(five_star, "misc", "rings_dust0", 256.0F, 3, Color.white, 256.0F, radius_sparrowhawk, 180.0F, "ring", "Kestrel's Rest");
      this.addDerelict(system_five, five_star, "istl_stormkestrel_proto_test", ShipCondition.GOOD, radius_sparrowhawk, true, "the_deserter");
      this.addDerelict(system_five, five_star, "istl_imp_proto_test", ShipCondition.AVERAGE, radius_sparrowhawk - 100.0F, true, "the_deserter");
      this.addDerelict(system_five, five_star, "istl_imp_proto_test", ShipCondition.WRECKED, radius_sparrowhawk + 125.0F, true, "the_deserter");
      this.addDerelict(system_five, five_star, "istl_imp_proto_test", ShipCondition.BATTERED, radius_sparrowhawk + 50.0F, true, "the_deserter");
      this.addDerelict(system_five, five_star, "nebula_Standard", ShipCondition.AVERAGE, radius_sparrowhawk + 150.0F, true, "independent");
      this.addDerelict(system_five, five_star, "nebula_Standard", ShipCondition.BATTERED, radius_sparrowhawk + 100.0F, false, "independent");
      this.addDerelict(system_five, five_star, "istl_sevastopol_mk1_std", ShipCondition.BATTERED, radius_sparrowhawk + 250.0F, false, "independent");
      this.addDerelict(system_five, five_star, "shrike_p_Attack", ShipCondition.BATTERED, radius_sparrowhawk - 125.0F, true, "independent");
      this.addDerelict(system_five, five_star, "valkyrie_Elite", ShipCondition.AVERAGE, radius_sparrowhawk - 50.0F, true, "independent");
      this.addDerelict(system_five, five_star, "wolf_CS", ShipCondition.WRECKED, radius_sparrowhawk - 75.0F, false, "independent");
      this.addDerelict(system_five, five_star, "istl_puddlejumper_mk1_std", ShipCondition.BATTERED, radius_sparrowhawk + 75.0F, true, "independent");
      this.addDerelict(system_five, five_star, "istl_puddlejumper_mk1_std", ShipCondition.AVERAGE, radius_sparrowhawk + 25.0F, false, "independent");
      PlanetAPI yod3 = system_five.addPlanet("istl_planet_yod3", five_star, "Chernov", "lava_minor", 120.0F, 200.0F, 5200.0F, 400.0F);
      Misc.initConditionMarket(yod3);
      yod3.getMarket().addCondition("hot");
      yod3.getMarket().addCondition("high_gravity");
      yod3.getMarket().addCondition("tectonic_activity");
      yod3.getMarket().addCondition("ore_abundant");
      yod3.getMarket().addCondition("rare_ore_rich");
      PlanetAPI yod3shell = system_five.addPlanet("istl_planet_yod3shell", five_star, "Artificial Toposphere", "istl_dysonshell", 120.0F, 240.0F, 5200.0F, 400.0F);
      Misc.initConditionMarket(yod3shell);
      yod3shell.getMarket().addCondition("hot");
      yod3shell.getMarket().addCondition("no_atmosphere");
      yod3shell.getMarket().addCondition("low_gravity");
      yod3shell.getMarket().addCondition("ore_sparse");
      yod3shell.getMarket().addCondition("rare_ore_sparse");
      yod3shell.getSpec().setShieldTexture(Global.getSettings().getSpriteName("industry", "istl_dysonshield"));
      yod3shell.getSpec().setShieldThickness(0.0F);
      yod3shell.getSpec().setShieldColor(new Color(255, 255, 255, 75));
      yod3shell.applySpecChanges();
      PlanetAPI yod3a = system_five.addPlanet("istl_planet_yod3a", yod3, "Chervy", "barren_castiron", 360.0F * (float)Math.random(), 45.0F, 400.0F, 60.0F);
      Misc.initConditionMarket(yod3a);
      yod3a.getMarket().addCondition("no_atmosphere");
      yod3a.getMarket().addCondition("low_gravity");
      yod3a.getMarket().addCondition("ore_rich");
      yod3a.getMarket().addCondition("rare_ore_moderate");
      SectorEntityToken chernov_loc = system_five.addCustomEntity((String)null, (String)null, "stable_location", "neutral");
      chernov_loc.setCircularOrbitPointingDown(five_star, 300.0F, 5200.0F, 400.0F);
      StarSystemGenerator.addOrbitingEntities(system_five, five_star, istl_constellation_Age, 3, 5, 6000.0F, 0, true);
      system_five.autogenerateHyperspaceJumpPoints(true, true);
      this.cleanup(system_five);
   }

   void cleanup(StarSystemAPI system) {
      HyperspaceTerrainPlugin plugin = (HyperspaceTerrainPlugin)Misc.getHyperspaceTerrain().getPlugin();
      NebulaEditor editor = new NebulaEditor(plugin);
      float minRadius = plugin.getTileSize() * 2.0F;
      float radius = system.getMaxRadiusInHyperspace();
      editor.clearArc(system.getLocation().x, system.getLocation().y, 0.0F, radius + minRadius * 0.5F, 0.0F, 360.0F);
      editor.clearArc(system.getLocation().x, system.getLocation().y, 0.0F, radius + minRadius, 0.0F, 360.0F, 0.25F);
   }

   private void addDerelict(StarSystemAPI system_besson, SectorEntityToken focus, String variantId, ShipCondition condition, float orbitRadius, boolean recoverable, String factionIdForShipName) {
      DerelictShipData params = new DerelictShipData(new PerShipData(variantId, condition), false);
      SectorEntityToken ship = BaseThemeGenerator.addSalvageEntity(system_besson, "wreck", "neutral", params);
      ship.setDiscoverable(true);
      float orbitDays = orbitRadius / (10.0F + (float)Math.random() * 5.0F);
      ship.setCircularOrbit(focus, (float)Math.random() * 360.0F, orbitRadius, orbitDays);
      if (recoverable) {
         ShipRecoverySpecialCreator creator = new ShipRecoverySpecialCreator((Random)null, 0, 0, false, (DerelictType)null, (WeightedRandomPicker)null);
         Misc.setSalvageSpecial(ship, creator.createSpecial(ship, (SpecialCreationContext)null));
      }

   }
}
